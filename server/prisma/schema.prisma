generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/**
 * ================= Enums =================
 */

enum JenisTugas {
  DISKUSI
  ABSEN
  TUGAS
  QUIZ
}

enum StatusTugas {
  BELUM
  SELESAI
}

enum AdminRole {
  OWNER
  ADMIN
}

enum ReminderSource {
  ADMIN
  WEB
}

enum ReminderStatus {
  PENDING
  SENT
  CANCELLED
}

enum ReminderChannel {
  WA
}

/**
 * =============== Admin ===============
 */

model Admin {
  id           Int       @id @default(autoincrement())
  username     String    @unique @db.VarChar(50)
  passwordHash String    @db.VarChar(255)
  role         AdminRole @default(ADMIN)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  reminders Reminder[]

  @@index([role])
  @@index([isActive])
}

/**
 * =============== Core ===============
 */

model Student {
  id          Int          @id @default(autoincrement())
  nim         String       @unique @db.VarChar(30)
  noHp        String       @unique @db.VarChar(20)
  nama        String       @db.VarChar(100)
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([nama])
}

model Course {
  id          Int          @id @default(autoincrement())
  nama        String       @unique @db.VarChar(120)
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([nama])
}

/**
 * ===== Master jendela global per (sesi, jenis) =====
 */

model SessionWindow {
  id        Int        @id @default(autoincrement())
  sesi      Int
  jenis     JenisTugas
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([sesi, jenis])
  @@index([sesi])
  @@index([jenis])
  @@index([startAt])
  @@index([endAt])
}

model Enrollment {
  id        Int         @id @default(autoincrement())
  studentId Int
  courseId  Int
  items     TutonItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model TutonItem {
  id           Int         @id @default(autoincrement())
  enrollmentId Int
  jenis        JenisTugas
  sesi         Int
  status       StatusTugas @default(BELUM)
  nilai        Float?
  deskripsi    String?     @db.VarChar(255)

  openAt     DateTime?
  deadlineAt DateTime?
  selesaiAt  DateTime?

  reminders Reminder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, jenis, sesi])
  @@index([enrollmentId])
  @@index([openAt])
  @@index([deadlineAt])
  @@index([jenis, sesi])
}

model Reminder {
  id               Int             @id @default(autoincrement())
  itemId           Int
  source           ReminderSource  @default(WEB)
  status           ReminderStatus  @default(PENDING)
  channel          ReminderChannel @default(WA)
  note             String?         @db.VarChar(255)
  createdByAdminId Int?
  offsetMin        Int             @default(1440)
  active           Boolean         @default(true)
  createdAt        DateTime        @default(now())
  sentAt           DateTime?

  item  TutonItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  admin Admin?    @relation(fields: [createdByAdminId], references: [id], onDelete: SetNull)

  @@index([itemId])
  @@index([status])
  @@index([createdByAdminId])
}
